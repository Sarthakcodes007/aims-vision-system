name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Test API endpoints
      run: |
        # Start the API server in background
        python api_server.py &
        API_PID=$!
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/api/health || exit 1
        
        # Kill the API server
        kill $API_PID
    
    - name: Run unit tests
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install frontend testing tools
      run: |
        npm install -g html-validate
        npm install -g lighthouse-ci
    
    - name: Validate HTML
      run: |
        html-validate *.html
    
    - name: Run Lighthouse CI
      run: |
        # Start a simple HTTP server
        python -m http.server 8080 &
        SERVER_PID=$!
        sleep 5
        
        # Run Lighthouse
        lhci autorun --upload.target=temporary-public-storage || true
        
        # Kill the server
        kill $SERVER_PID
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/aims-vision:latest
          ${{ secrets.DOCKER_USERNAME }}/aims-vision:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure based on your hosting platform"
        # Add your deployment commands here
        # Examples:
        # - Deploy to AWS ECS
        # - Deploy to Google Cloud Run
        # - Deploy to Azure Container Instances
        # - Deploy to Kubernetes
        # - Deploy to Heroku
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          ## Changes
          - See commit history for detailed changes
          
          ## Docker Image
          ```
          docker pull ${{ secrets.DOCKER_USERNAME }}/aims-vision:${{ github.sha }}
          ```
        draft: false
        prerelease: false